[gd_scene load_steps=15 format=3 uid="uid://mddvjei5ynrc"]

[ext_resource type="PackedScene" uid="uid://b1siu7y0wgssc" path="res://Assets/LowPoly_Environnment/Terrain_1.fbx" id="1_ftkrs"]

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_j1gdl"]

[sub_resource type="Sky" id="Sky_ftkrs"]
sky_material = SubResource("ProceduralSkyMaterial_j1gdl")

[sub_resource type="Environment" id="Environment_frq0i"]
background_mode = 2
sky = SubResource("Sky_ftkrs")

[sub_resource type="PlaneMesh" id="PlaneMesh_ftkrs"]
size = Vector2(100, 300)

[sub_resource type="PlaneMesh" id="PlaneMesh_1doys"]
size = Vector2(45, 20)

[sub_resource type="PlaneMesh" id="PlaneMesh_frq0i"]
size = Vector2(50, 20)

[sub_resource type="PlaneMesh" id="PlaneMesh_5x3gp"]
size = Vector2(45, 20)

[sub_resource type="PlaneMesh" id="PlaneMesh_61x8g"]
size = Vector2(25, 20)

[sub_resource type="Shader" id="Shader_ftkrs"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.4.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform ivec2 albedo_texture_size;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16.0, 16.0);
varying vec3 uv1_triplanar_pos;

uniform float uv1_blend_sharpness : hint_range(0.0, 150.0, 0.001);
varying vec3 uv1_power_normal;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	vec3 normal = MODEL_NORMAL_MATRIX * NORMAL;

	TANGENT = vec3(0.0, 0.0, -1.0) * abs(normal.x);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.y);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.z);
	TANGENT = inverse(MODEL_NORMAL_MATRIX) * normalize(TANGENT);

	BINORMAL = vec3(0.0, 1.0, 0.0) * abs(normal.x);
	BINORMAL += vec3(0.0, 0.0, -1.0) * abs(normal.y);
	BINORMAL += vec3(0.0, 1.0, 0.0) * abs(normal.z);
	BINORMAL = inverse(MODEL_NORMAL_MATRIX) * normalize(BINORMAL);

	// UV1 Triplanar: Enabled (with World Triplanar)
	uv1_power_normal = pow(abs(normal), vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz * uv1_scale + uv1_offset * TIME * 0.01;
	uv1_power_normal /= dot(uv1_power_normal, vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0, -1.0, 1.0);
}

vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
	vec4 samp = vec4(0.0);
	samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
	samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
	samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
	return samp;
}

void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo, uv1_power_normal, uv1_triplanar_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(triplanar_texture(texture_metallic, uv1_power_normal, uv1_triplanar_pos), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness, uv1_power_normal, uv1_triplanar_pos), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	// Normal Map: Enabled
	NORMAL_MAP = triplanar_texture(texture_normal, uv1_power_normal, uv1_triplanar_pos).rgb;
	NORMAL_MAP_DEPTH = normal_scale;
	ALPHA *= albedo.a * albedo_tex.a;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_ftkrs"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_frq0i"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_ftkrs")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_frq0i"]
render_priority = 0
shader = SubResource("Shader_ftkrs")
shader_parameter/albedo = Color(0, 0.368627, 0.878431, 0.85098)
shader_parameter/albedo_texture_size = Vector2i(0, 0)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.0
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/texture_normal = SubResource("NoiseTexture2D_frq0i")
shader_parameter/normal_scale = 1.0
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(0.04, 0.04, 0.04)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

[sub_resource type="BoxMesh" id="BoxMesh_ftkrs"]
material = SubResource("ShaderMaterial_frq0i")
size = Vector3(150, 50, 200)

[node name="Town3" type="Node3D"]

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_frq0i")

[node name="Terrain_1" parent="." instance=ExtResource("1_ftkrs")]
transform = Transform3D(9.98881, 0, -0.472982, 0, 2, 0, 0.472982, 0, 9.98881, -11.2753, -4.57198, 53.7977)

[node name="Ground" type="Node3D" parent="."]
transform = Transform3D(0.998881, 0, -0.0472982, 0, 1, 0, 0.0472982, 0, 0.998881, -1.81878, -0.0620632, 7.85229)

[node name="MeshInstance3D" type="MeshInstance3D" parent="Ground"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -74.6076, 0, 0)
mesh = SubResource("PlaneMesh_ftkrs")

[node name="MeshInstance3D2" type="MeshInstance3D" parent="Ground"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -2.2775, 0, -14.9875)
mesh = SubResource("PlaneMesh_1doys")

[node name="MeshInstance3D3" type="MeshInstance3D" parent="Ground"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 4.03689)
mesh = SubResource("PlaneMesh_frq0i")

[node name="MeshInstance3D4" type="MeshInstance3D" parent="Ground"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 23.8706)
mesh = SubResource("PlaneMesh_frq0i")

[node name="MeshInstance3D5" type="MeshInstance3D" parent="Ground"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 43.4945)
mesh = SubResource("PlaneMesh_frq0i")

[node name="MeshInstance3D6" type="MeshInstance3D" parent="Ground"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -4.67303, 0, 63.3186)
mesh = SubResource("PlaneMesh_5x3gp")

[node name="MeshInstance3D7" type="MeshInstance3D" parent="Ground"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -15.4549, 0, 83.1073)
mesh = SubResource("PlaneMesh_61x8g")

[node name="Water" type="Node3D" parent="."]
transform = Transform3D(0.998881, 0, -0.0472982, 0, 1, 0, 0.0472982, 0, 0.998881, -11.7958, -34.936, 53.1841)

[node name="MeshInstance3D" type="MeshInstance3D" parent="Water"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 51.9971, 8.29792, 0)
mesh = SubResource("BoxMesh_ftkrs")
